// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(derec_libraryFFI)
import derec_libraryFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_derec_library_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_derec_library_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureDerecLibraryInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}


public struct ContactMessageResult {
    public var contactMessage: ContactMessageWrapper
    public var secretKeyMaterial: PairingSecretKeyMaterialWrapper

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(contactMessage: ContactMessageWrapper, secretKeyMaterial: PairingSecretKeyMaterialWrapper) {
        self.contactMessage = contactMessage
        self.secretKeyMaterial = secretKeyMaterial
    }
}

#if compiler(>=6)
extension ContactMessageResult: Sendable {}
#endif


extension ContactMessageResult: Equatable, Hashable {
    public static func ==(lhs: ContactMessageResult, rhs: ContactMessageResult) -> Bool {
        if lhs.contactMessage != rhs.contactMessage {
            return false
        }
        if lhs.secretKeyMaterial != rhs.secretKeyMaterial {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(contactMessage)
        hasher.combine(secretKeyMaterial)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContactMessageResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContactMessageResult {
        return
            try ContactMessageResult(
                contactMessage: FfiConverterTypeContactMessageWrapper.read(from: &buf), 
                secretKeyMaterial: FfiConverterTypePairingSecretKeyMaterialWrapper.read(from: &buf)
        )
    }

    public static func write(_ value: ContactMessageResult, into buf: inout [UInt8]) {
        FfiConverterTypeContactMessageWrapper.write(value.contactMessage, into: &buf)
        FfiConverterTypePairingSecretKeyMaterialWrapper.write(value.secretKeyMaterial, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContactMessageResult_lift(_ buf: RustBuffer) throws -> ContactMessageResult {
    return try FfiConverterTypeContactMessageResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContactMessageResult_lower(_ value: ContactMessageResult) -> RustBuffer {
    return FfiConverterTypeContactMessageResult.lower(value)
}


public struct ContactMessageWrapper {
    public var mlkemEncapsulationKey: Data
    public var eciesPublicKey: Data
    public var publicKeyId: UInt64
    public var nonce: UInt64
    public var transportUri: String
    public var messageEncodingType: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(mlkemEncapsulationKey: Data, eciesPublicKey: Data, publicKeyId: UInt64, nonce: UInt64, transportUri: String, messageEncodingType: Int32) {
        self.mlkemEncapsulationKey = mlkemEncapsulationKey
        self.eciesPublicKey = eciesPublicKey
        self.publicKeyId = publicKeyId
        self.nonce = nonce
        self.transportUri = transportUri
        self.messageEncodingType = messageEncodingType
    }
}

#if compiler(>=6)
extension ContactMessageWrapper: Sendable {}
#endif


extension ContactMessageWrapper: Equatable, Hashable {
    public static func ==(lhs: ContactMessageWrapper, rhs: ContactMessageWrapper) -> Bool {
        if lhs.mlkemEncapsulationKey != rhs.mlkemEncapsulationKey {
            return false
        }
        if lhs.eciesPublicKey != rhs.eciesPublicKey {
            return false
        }
        if lhs.publicKeyId != rhs.publicKeyId {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.transportUri != rhs.transportUri {
            return false
        }
        if lhs.messageEncodingType != rhs.messageEncodingType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(mlkemEncapsulationKey)
        hasher.combine(eciesPublicKey)
        hasher.combine(publicKeyId)
        hasher.combine(nonce)
        hasher.combine(transportUri)
        hasher.combine(messageEncodingType)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContactMessageWrapper: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContactMessageWrapper {
        return
            try ContactMessageWrapper(
                mlkemEncapsulationKey: FfiConverterData.read(from: &buf), 
                eciesPublicKey: FfiConverterData.read(from: &buf), 
                publicKeyId: FfiConverterUInt64.read(from: &buf), 
                nonce: FfiConverterUInt64.read(from: &buf), 
                transportUri: FfiConverterString.read(from: &buf), 
                messageEncodingType: FfiConverterInt32.read(from: &buf)
        )
    }

    public static func write(_ value: ContactMessageWrapper, into buf: inout [UInt8]) {
        FfiConverterData.write(value.mlkemEncapsulationKey, into: &buf)
        FfiConverterData.write(value.eciesPublicKey, into: &buf)
        FfiConverterUInt64.write(value.publicKeyId, into: &buf)
        FfiConverterUInt64.write(value.nonce, into: &buf)
        FfiConverterString.write(value.transportUri, into: &buf)
        FfiConverterInt32.write(value.messageEncodingType, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContactMessageWrapper_lift(_ buf: RustBuffer) throws -> ContactMessageWrapper {
    return try FfiConverterTypeContactMessageWrapper.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContactMessageWrapper_lower(_ value: ContactMessageWrapper) -> RustBuffer {
    return FfiConverterTypeContactMessageWrapper.lower(value)
}


public struct PairRequestMessageWrapper {
    public var senderKind: Int32
    public var mlkemCiphertext: Data
    public var eciesPublicKey: Data
    public var publicKeyId: UInt64
    public var nonce: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(senderKind: Int32, mlkemCiphertext: Data, eciesPublicKey: Data, publicKeyId: UInt64, nonce: UInt64) {
        self.senderKind = senderKind
        self.mlkemCiphertext = mlkemCiphertext
        self.eciesPublicKey = eciesPublicKey
        self.publicKeyId = publicKeyId
        self.nonce = nonce
    }
}

#if compiler(>=6)
extension PairRequestMessageWrapper: Sendable {}
#endif


extension PairRequestMessageWrapper: Equatable, Hashable {
    public static func ==(lhs: PairRequestMessageWrapper, rhs: PairRequestMessageWrapper) -> Bool {
        if lhs.senderKind != rhs.senderKind {
            return false
        }
        if lhs.mlkemCiphertext != rhs.mlkemCiphertext {
            return false
        }
        if lhs.eciesPublicKey != rhs.eciesPublicKey {
            return false
        }
        if lhs.publicKeyId != rhs.publicKeyId {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(senderKind)
        hasher.combine(mlkemCiphertext)
        hasher.combine(eciesPublicKey)
        hasher.combine(publicKeyId)
        hasher.combine(nonce)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePairRequestMessageWrapper: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PairRequestMessageWrapper {
        return
            try PairRequestMessageWrapper(
                senderKind: FfiConverterInt32.read(from: &buf), 
                mlkemCiphertext: FfiConverterData.read(from: &buf), 
                eciesPublicKey: FfiConverterData.read(from: &buf), 
                publicKeyId: FfiConverterUInt64.read(from: &buf), 
                nonce: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PairRequestMessageWrapper, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.senderKind, into: &buf)
        FfiConverterData.write(value.mlkemCiphertext, into: &buf)
        FfiConverterData.write(value.eciesPublicKey, into: &buf)
        FfiConverterUInt64.write(value.publicKeyId, into: &buf)
        FfiConverterUInt64.write(value.nonce, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairRequestMessageWrapper_lift(_ buf: RustBuffer) throws -> PairRequestMessageWrapper {
    return try FfiConverterTypePairRequestMessageWrapper.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairRequestMessageWrapper_lower(_ value: PairRequestMessageWrapper) -> RustBuffer {
    return FfiConverterTypePairRequestMessageWrapper.lower(value)
}


public struct PairResponseMessageWrapper {
    public var senderKind: Int32
    public var resultStatus: Int32
    public var resultMemo: String
    public var nonce: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(senderKind: Int32, resultStatus: Int32, resultMemo: String, nonce: UInt64) {
        self.senderKind = senderKind
        self.resultStatus = resultStatus
        self.resultMemo = resultMemo
        self.nonce = nonce
    }
}

#if compiler(>=6)
extension PairResponseMessageWrapper: Sendable {}
#endif


extension PairResponseMessageWrapper: Equatable, Hashable {
    public static func ==(lhs: PairResponseMessageWrapper, rhs: PairResponseMessageWrapper) -> Bool {
        if lhs.senderKind != rhs.senderKind {
            return false
        }
        if lhs.resultStatus != rhs.resultStatus {
            return false
        }
        if lhs.resultMemo != rhs.resultMemo {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(senderKind)
        hasher.combine(resultStatus)
        hasher.combine(resultMemo)
        hasher.combine(nonce)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePairResponseMessageWrapper: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PairResponseMessageWrapper {
        return
            try PairResponseMessageWrapper(
                senderKind: FfiConverterInt32.read(from: &buf), 
                resultStatus: FfiConverterInt32.read(from: &buf), 
                resultMemo: FfiConverterString.read(from: &buf), 
                nonce: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PairResponseMessageWrapper, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.senderKind, into: &buf)
        FfiConverterInt32.write(value.resultStatus, into: &buf)
        FfiConverterString.write(value.resultMemo, into: &buf)
        FfiConverterUInt64.write(value.nonce, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairResponseMessageWrapper_lift(_ buf: RustBuffer) throws -> PairResponseMessageWrapper {
    return try FfiConverterTypePairResponseMessageWrapper.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairResponseMessageWrapper_lower(_ value: PairResponseMessageWrapper) -> RustBuffer {
    return FfiConverterTypePairResponseMessageWrapper.lower(value)
}


public struct PairingRequestResult {
    public var requestMessage: PairRequestMessageWrapper
    public var secretKeyMaterial: PairingSecretKeyMaterialWrapper

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(requestMessage: PairRequestMessageWrapper, secretKeyMaterial: PairingSecretKeyMaterialWrapper) {
        self.requestMessage = requestMessage
        self.secretKeyMaterial = secretKeyMaterial
    }
}

#if compiler(>=6)
extension PairingRequestResult: Sendable {}
#endif


extension PairingRequestResult: Equatable, Hashable {
    public static func ==(lhs: PairingRequestResult, rhs: PairingRequestResult) -> Bool {
        if lhs.requestMessage != rhs.requestMessage {
            return false
        }
        if lhs.secretKeyMaterial != rhs.secretKeyMaterial {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(requestMessage)
        hasher.combine(secretKeyMaterial)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePairingRequestResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PairingRequestResult {
        return
            try PairingRequestResult(
                requestMessage: FfiConverterTypePairRequestMessageWrapper.read(from: &buf), 
                secretKeyMaterial: FfiConverterTypePairingSecretKeyMaterialWrapper.read(from: &buf)
        )
    }

    public static func write(_ value: PairingRequestResult, into buf: inout [UInt8]) {
        FfiConverterTypePairRequestMessageWrapper.write(value.requestMessage, into: &buf)
        FfiConverterTypePairingSecretKeyMaterialWrapper.write(value.secretKeyMaterial, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairingRequestResult_lift(_ buf: RustBuffer) throws -> PairingRequestResult {
    return try FfiConverterTypePairingRequestResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairingRequestResult_lower(_ value: PairingRequestResult) -> RustBuffer {
    return FfiConverterTypePairingRequestResult.lower(value)
}


public struct PairingResponseResult {
    public var responseMessage: PairResponseMessageWrapper
    public var sharedKey: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(responseMessage: PairResponseMessageWrapper, sharedKey: Data) {
        self.responseMessage = responseMessage
        self.sharedKey = sharedKey
    }
}

#if compiler(>=6)
extension PairingResponseResult: Sendable {}
#endif


extension PairingResponseResult: Equatable, Hashable {
    public static func ==(lhs: PairingResponseResult, rhs: PairingResponseResult) -> Bool {
        if lhs.responseMessage != rhs.responseMessage {
            return false
        }
        if lhs.sharedKey != rhs.sharedKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(responseMessage)
        hasher.combine(sharedKey)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePairingResponseResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PairingResponseResult {
        return
            try PairingResponseResult(
                responseMessage: FfiConverterTypePairResponseMessageWrapper.read(from: &buf), 
                sharedKey: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: PairingResponseResult, into buf: inout [UInt8]) {
        FfiConverterTypePairResponseMessageWrapper.write(value.responseMessage, into: &buf)
        FfiConverterData.write(value.sharedKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairingResponseResult_lift(_ buf: RustBuffer) throws -> PairingResponseResult {
    return try FfiConverterTypePairingResponseResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairingResponseResult_lower(_ value: PairingResponseResult) -> RustBuffer {
    return FfiConverterTypePairingResponseResult.lower(value)
}


public struct PairingSecretKeyMaterialWrapper {
    public var mlkemDecapsulationKey: Data?
    public var mlkemSharedSecret: Data?
    public var eciesSecretKey: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(mlkemDecapsulationKey: Data?, mlkemSharedSecret: Data?, eciesSecretKey: Data) {
        self.mlkemDecapsulationKey = mlkemDecapsulationKey
        self.mlkemSharedSecret = mlkemSharedSecret
        self.eciesSecretKey = eciesSecretKey
    }
}

#if compiler(>=6)
extension PairingSecretKeyMaterialWrapper: Sendable {}
#endif


extension PairingSecretKeyMaterialWrapper: Equatable, Hashable {
    public static func ==(lhs: PairingSecretKeyMaterialWrapper, rhs: PairingSecretKeyMaterialWrapper) -> Bool {
        if lhs.mlkemDecapsulationKey != rhs.mlkemDecapsulationKey {
            return false
        }
        if lhs.mlkemSharedSecret != rhs.mlkemSharedSecret {
            return false
        }
        if lhs.eciesSecretKey != rhs.eciesSecretKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(mlkemDecapsulationKey)
        hasher.combine(mlkemSharedSecret)
        hasher.combine(eciesSecretKey)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePairingSecretKeyMaterialWrapper: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PairingSecretKeyMaterialWrapper {
        return
            try PairingSecretKeyMaterialWrapper(
                mlkemDecapsulationKey: FfiConverterOptionData.read(from: &buf), 
                mlkemSharedSecret: FfiConverterOptionData.read(from: &buf), 
                eciesSecretKey: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: PairingSecretKeyMaterialWrapper, into buf: inout [UInt8]) {
        FfiConverterOptionData.write(value.mlkemDecapsulationKey, into: &buf)
        FfiConverterOptionData.write(value.mlkemSharedSecret, into: &buf)
        FfiConverterData.write(value.eciesSecretKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairingSecretKeyMaterialWrapper_lift(_ buf: RustBuffer) throws -> PairingSecretKeyMaterialWrapper {
    return try FfiConverterTypePairingSecretKeyMaterialWrapper.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairingSecretKeyMaterialWrapper_lower(_ value: PairingSecretKeyMaterialWrapper) -> RustBuffer {
    return FfiConverterTypePairingSecretKeyMaterialWrapper.lower(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}
public func createContactMessage(channelId: UInt64, transportUri: String) -> ContactMessageResult  {
    return try!  FfiConverterTypeContactMessageResult_lift(try! rustCall() {
    uniffi_derec_library_fn_func_create_contact_message(
        FfiConverterUInt64.lower(channelId),
        FfiConverterString.lower(transportUri),$0
    )
})
}
public func processPairingResponseMessage(contactMessage: ContactMessageWrapper, pairResponseMessage: PairResponseMessageWrapper, pairingSecretKeyMaterial: PairingSecretKeyMaterialWrapper) -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_derec_library_fn_func_process_pairing_response_message(
        FfiConverterTypeContactMessageWrapper_lower(contactMessage),
        FfiConverterTypePairResponseMessageWrapper_lower(pairResponseMessage),
        FfiConverterTypePairingSecretKeyMaterialWrapper_lower(pairingSecretKeyMaterial),$0
    )
})
}
public func producePairingRequestMessage(channelId: UInt64, kind: Int32, contactMessage: ContactMessageWrapper) -> PairingRequestResult  {
    return try!  FfiConverterTypePairingRequestResult_lift(try! rustCall() {
    uniffi_derec_library_fn_func_produce_pairing_request_message(
        FfiConverterUInt64.lower(channelId),
        FfiConverterInt32.lower(kind),
        FfiConverterTypeContactMessageWrapper_lower(contactMessage),$0
    )
})
}
public func producePairingResponseMessage(kind: Int32, pairRequestMessage: PairRequestMessageWrapper, pairingSecretKeyMaterial: PairingSecretKeyMaterialWrapper) -> PairingResponseResult  {
    return try!  FfiConverterTypePairingResponseResult_lift(try! rustCall() {
    uniffi_derec_library_fn_func_produce_pairing_response_message(
        FfiConverterInt32.lower(kind),
        FfiConverterTypePairRequestMessageWrapper_lower(pairRequestMessage),
        FfiConverterTypePairingSecretKeyMaterialWrapper_lower(pairingSecretKeyMaterial),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_derec_library_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_derec_library_checksum_func_create_contact_message() != 21717) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_derec_library_checksum_func_process_pairing_response_message() != 46884) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_derec_library_checksum_func_produce_pairing_request_message() != 32427) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_derec_library_checksum_func_produce_pairing_response_message() != 8515) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureDerecLibraryInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all